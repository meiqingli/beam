{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts","webpack:///./dataTransformator.ts","webpack:///./Trace.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","u","_SeriesWrapper","_editor","_libLoader","_anno","_dataTransformator","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","annotationsSrv","_this","this","annotations","AnnoInfo","seriesByKey","Map","seriesHash","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","layout","width","height","redraw","console","log","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","dataColumns","defaultsDeep","defaults","cfg","pconfig","traces","a","events","loadPlotly","then","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","err","series","clear","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","onPanelInitialized","_updateTraceData","getProcessedLayout","xaxis","yaxis","fixScale","scaleanchor","b","pad","type","mapping","isDate","title","range","timeSrv","timeRange","from","valueOf","to","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","yaxis2","drawPlot","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","react","newTraces","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","found","fullData","Math","utc","setTime","Plots","purge","innerHTML","snapshot","dataList","_a","dataTransformator","toTraces","dataColumnNames","sortedSeries","allColumnNames","all","serie","xVals","String","yVals","push","fill","finfo","useRefID_1","targets","sidx","refId","fromCharCode","charCodeAt","columns","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","showAnnotations","shapes","getAnnotations","results","hasAnno","update","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","tconfig","config","createTraceName","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","force","zero","vals","toArray","Array","loadIfNecessary","res","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","visible","loadFromCDN","dataColumn","xColumn","yColumn","showlegend","legend","orientation","barmode","dragmode","hovermode","family","showgrid","zeroline","rangemode","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","table","rows","index","col","Error","row","_module","REMOVE_KEY","axis","defaultMappings","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getDataColumns","reject","getSeriesSegs","withRemove","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","h","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity","_Trace","debug","ident","dbRequestResults","traceDataColumn_1","xValueColumn_1","yValueColumn_1","sort","obj1","obj2","obj1order","obj2order","dbRequestRow","traceName","traceX","traceY","Date","getHours","Trace","prevTraceX","values","s1","s2","localeCompare","numeric"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport { EditorHelper } from './editor';\n\nimport { loadPlotly, loadIfNecessary } from './libLoader';\nimport { AnnoInfo } from './anno';\nimport { Axis } from 'plotly.js';\nimport { Trace } from './Trace';\nimport { dataTransformator } from './dataTransformator';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#005f81',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#33B5E5',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#DDD',\n          width: 0,\n        },\n        showscale: false,\n      },\n      color_option: 'ramp',\n    },\n  };\n\n  static yaxis2: Partial<Axis> = {\n    title: 'Annotations',\n    type: 'linear',\n    range: [0, 1],\n    visible: false,\n  };\n\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      showAnnotations: true,\n      fixScale: '',\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'bar',\n        fill: 'None',\n        mode: 'None',\n        displayModeBar: false,\n      },\n      dataColumnNames: {\n        dataColumn: '?',\n        xColumn: '?',\n        yColumn: '?'\n      },\n      layout: {\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n        },\n        barmode: 'stack',\n        dragmode: 'zoom', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n        yaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  dataColumns: any[];\n  newTraces: any[];\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    this.dataColumns = [\"test1\", \"test2\", \"ahahahahaha\"]\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      console.log('Plotly', v);\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n\n      console.log('redraw with layout:', this.layout);\n    }\n  }, 50);\n\n  onResize() {\n    console.log('onResize', this.graphDiv, this.layout, Plotly, this.graphDiv && this.layout && Plotly)\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      console.log('RESIZE in editor');\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion);\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    console.log('After Migration:', cfg);\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis\n      layout.scene = {\n        xaxis: layout.xaxis,\n        yaxis: layout.yaxis,\n        zaxis: layout.zaxis,\n      };\n\n      delete layout.xaxis;\n      delete layout.yaxis;\n      delete layout.zaxis;\n\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n\n      // Check if the X axis should be a date\n      if (!layout.xaxis.type || layout.xaxis.type === 'auto') {\n        const mapping = _.get(this.cfg, 'traces[0].mapping.x');\n        if (mapping && mapping.indexOf('time') >= 0) {\n          layout.xaxis.type = 'date';\n        }\n      }\n\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 50 : 35,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // Set the range to the query window\n      if (isDate && !layout.xaxis.range) {\n        const range = this.timeSrv.timeRange();\n        layout.xaxis.range = [range.from.valueOf(), range.to.valueOf()];\n      }\n\n      // get the css rule of grafana graph axis text\n      const labelStyle = this.getCssRule('div.flot-text');\n      if (labelStyle) {\n        let color = labelStyle.style.color;\n        if (!layout.font) {\n          layout.font = {};\n        }\n        layout.font.color = color;\n\n        // make the grid a little more transparent\n        color = $.color\n          .parse(color)\n          .scale('a', 0.22)\n          .toString();\n\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = color;\n        layout.yaxis.gridcolor = color;\n      }\n\n      // Set the second axis\n      layout.yaxis2 = PlotlyPanelCtrl.yaxis2;\n    }\n    return layout;\n  }\n\n  drawPlot() {\n    const s = this.cfg.settings;\n    const options = {\n      showLink: false,\n      displaylogo: false,\n      displayModeBar: s.displayModeBar,\n      modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n    };\n    this.layout = this.getProcessedLayout();\n\n    Plotly.react(this.graphDiv, this.newTraces, this.layout, options);\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      this.drawPlot();\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n        console.log('SELECTED', data);\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const found = data.points[i];\n          const idx = found.pointNumber;\n          const ts = found.fullData.x[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = { from: moment.utc(min), to: moment.utc(max) };\n\n        console.log('SELECTED!!!', min, max, data.points.length, range);\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  //compareForArrays\n\n  onDataReceived(dataList) {\n    this.newTraces = []\n    if (!dataList || dataList.length < 1) {\n      console.log('data is empty:', dataList);\n      return;\n    }\n\n    let { sortedSeries, allColumnNames } = dataTransformator.toTraces(dataList, this.cfg.dataColumnNames)\n\n    this.cfg.dataColumnNames.all = allColumnNames\n\n    console.log('series', sortedSeries);\n    console.log('allcolumns', allColumnNames);\n\n    sortedSeries.forEach((serie: Trace) => {\n      console.log('serie', serie)\n      let xVals = serie.x.map(String)\n      let yVals = serie.y\n\n      this.newTraces.push({\n        x: xVals,\n        y: yVals,\n        type: this.cfg.settings.type,\n        mode: this.cfg.settings.mode,\n        fill: this.cfg.settings.fill,\n        // text: hover text\n        // https://plot.ly/~alex/455/four-ways-to-change-opacity-of-scatter-markers.embed\n        // fillcolor: 'rgba(26, 150, 65, 0.4)',\n        name: serie.name\n      })\n    })\n\n    console.log(\"traces\", this.newTraces);\n    // this.onConfigChanged();\n    // this.render();\n\n    this.drawPlot();\n    // return;\n\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      this._updateTraceData();\n      this.render();\n    });\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        // mode: 'markers+lines', // really depends on config settings\n        __set: [], // { key:? property:? }\n      };\n\n      let mode = '';\n      if (config.show.markers) {\n        mode += '+markers';\n        trace.marker = config.settings.marker;\n\n        delete trace.marker.sizemin;\n        delete trace.marker.sizemode;\n        delete trace.marker.sizeref;\n\n        if (config.settings.color_option === 'ramp') {\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\n        } else {\n          delete trace.marker.colorscale;\n          delete trace.marker.showscale;\n        }\n      }\n\n      if (config.show.lines) {\n        mode += '+lines';\n        trace.line = config.settings.line;\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      if (is3D) {\n        this.__addCopyPath(trace, mapping.z, 'z');\n      }\n\n      // Set the trace mode\n      if (mode) {\n        trace.mode = mode.substring(1);\n      }\n      return trace;\n    });\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('NO Series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (this.traces.length !== this.cfg.traces.length) {\n      console.log(\n        'trace number mismatch.  Found: ' +\n        this.traces.length +\n        ', expect: ' +\n        this.cfg.traces.length\n      );\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        this.drawPlot();\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport { PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl };\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport { PlotlyPanelCtrl } from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getDataColumns(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      let options: any[] = [];\n\n      this.ctrl.dataColumns.forEach(dataColumn => {\n        options.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: dataColumn\n          })\n        )\n      })\n\n      console.log(\"options\", options);\n      resolve(options);\n    })\n  }\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      console.log(\"series\", series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push(a.text);\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n","import { Trace } from \"./Trace\";\n\nexport class dataTransformator {\n    static ident = \"dataTransformator\"\n    static debug = true\n\n    static toTraces(dataList, dataColumnNames) {\n        if (this.debug) {\n            console.log(this.ident, 'whole datalist', dataList);\n        }\n\n        let series = new Map<string, Trace>();\n        let sortedSeries: Trace[] = [];\n        var allColumnNames = \"\";\n\n        dataList.forEach(dbRequestResults => {\n            if (this.debug) {\n                console.log(this.ident, 'datalist item', dbRequestResults);\n            }\n\n            if (dbRequestResults.rows && dbRequestResults.rows.length > 0) {\n                let traceDataColumn = 2;\n                let xValueColumn = 1;\n                let yValueColumn = 3;\n\n                dbRequestResults.columns.forEach((row, index) => {\n                    if (row.text == dataColumnNames.xColumn) {\n                        xValueColumn = index\n                    }\n                    if (row.text == dataColumnNames.yColumn) {\n                        yValueColumn = index\n                    }\n                    if (row.text == dataColumnNames.dataColumn) {\n                        traceDataColumn = index\n                    }\n                })\n\n                allColumnNames = dbRequestResults.columns.map((r: { text: string; }) => r.text).join(' ')\n\n                let sortedRows = dbRequestResults.rows.sort((obj1: any[], obj2: any[]) => {\n                    let obj1order: number = Number(obj1[xValueColumn])\n                    let obj2order: number = Number(obj2[xValueColumn])\n\n                    if (obj1order > obj2order) {\n                        return 1;\n                    }\n\n                    if (obj1order < obj2order) {\n                        return -1;\n                    }\n\n                    return 0;\n                });\n\n                sortedRows.forEach(dbRequestRow => {\n                    let traceName = dbRequestRow[traceDataColumn];\n                    let traceX: number = Number(dbRequestRow[xValueColumn]);\n                    let traceY: number = Number(dbRequestRow[yValueColumn]);\n\n                    if (dataColumnNames.xColumn == 'Time') {\n                        let xdate = new Date(dbRequestRow[xValueColumn])\n                        traceX = xdate.getHours()\n                    }\n\n                    let trace = series.get(traceName);\n                    if (!trace) {\n                        trace = new Trace();\n                        trace.name = traceName;\n                        series.set(traceName, trace);\n                    }\n\n                    // to keep order\n                    let prevTraceX: number = trace.x[trace.x.length - 1];\n                    if (traceX <= prevTraceX) {\n                        traceX = prevTraceX + 1;\n                    }\n\n                    trace.x.push(traceX);\n                    trace.y.push(traceY);\n                })\n\n                sortedSeries = Array.from(series.values()).sort((s1: Trace, s2: Trace) => {\n                    return s1.name.localeCompare(s2.name, undefined, { numeric: true })\n\n                    // if (s1.name > s2.name) {\n                    //     return 1;\n                    // }\n                    // if (s1.name < s2.name) {\n                    //     return -1;\n                    // }\n                    // return 0;\n                });\n            }\n        });\n\n        console.log(this.ident, 'sorted series', sortedSeries);\n\n        return Object({\n            sortedSeries,\n            allColumnNames\n        })\n    }\n}","export class Trace{\n    public name: string = \"\";\n    public x : number[] = [];\n    public y: number[] = [];\n}"],"sourceRoot":""}